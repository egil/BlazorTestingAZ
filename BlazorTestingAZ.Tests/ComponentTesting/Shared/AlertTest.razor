@inherits TestContext
@code {
    [Fact]
    public void Alert_dismiss()
    {
        // Arrange
        IRenderedFragment cut = Render(
            @<Alert 
                Kind="AlertKind.Primary" 
                Dismissible="true">
                <p>HELLO WORLD</p>
            </Alert>);

        // Act
        cut.Find("[aria-label=Close]").Click();

        // Assert
        IRenderedComponent<Alert> component = cut.FindComponent<Alert>();
        
        // Access the component instance directly
        Alert alert = component.Instance;

        // Assert against the components state
        Assert.True(alert.Dismissed);
    }

    // Markup should match this: 
    // https://getbootstrap.com/docs/5.3/components/alerts/#dismissing
    [Fact]
    public void Alert_correct_markup_with_dismissal()
    {
        // Arrange
        var cut = Render(
            @<Alert 
                Kind="AlertKind.Warning" 
                Dismissible="true">
                <p>HELLO WORLD</p>
            </Alert>);

        // Assert
        cut.MarkupMatches(
            @<div class="fade show alert alert-warning alert-dismissible" role="alert">
                <p>HELLO WORLD</p>
                <button type="button" class="btn-close" aria-label="Close"></button>
            </div>);
    }

    [InlineData(AlertKind.None, true)]
    [InlineData(AlertKind.Primary, true)]
    [InlineData(AlertKind.Secondary, true)]
    [InlineData(AlertKind.Success, true)]
    [InlineData(AlertKind.Danger, true)]
    [InlineData(AlertKind.Warning, true)]
    [InlineData(AlertKind.Info, true)]
    [InlineData(AlertKind.Light, true)]
    [InlineData(AlertKind.Dark, true)]
    [InlineData(AlertKind.None, false)]
    [InlineData(AlertKind.Primary, false)]
    [InlineData(AlertKind.Secondary, false)]
    [InlineData(AlertKind.Success, false)]
    [InlineData(AlertKind.Danger, false)]
    [InlineData(AlertKind.Warning, false)]
    [InlineData(AlertKind.Info, false)]
    [InlineData(AlertKind.Light, false)]
    [InlineData(AlertKind.Dark, false)]
    [Theory]
    public Task Alert_markup(AlertKind kind, bool dismissible)
    {
        // Arrange & act
        IRenderedFragment cut = Render(
            @<Alert Kind="kind" Dismissible="dismissible">
                <p>CONTENT</p>
            </Alert>);
        
        // Assert
        return Verify(cut)
            .UseParameters(kind, dismissible);
    }
}